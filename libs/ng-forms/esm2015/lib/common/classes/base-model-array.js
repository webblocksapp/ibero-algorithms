import { BehaviorSubject } from 'rxjs';
import { BaseModel } from './base-model';
export class BaseModelArray {
    constructor(DtoClass) {
        this.array = [];
        this.change = new BehaviorSubject(false);
        this.dtoClass = DtoClass;
        this.array = [new BaseModel(this.dtoClass)];
    }
    fill(data) {
        const array = [];
        data.forEach((item) => {
            const model = new BaseModel(this.dtoClass);
            model.fill(item);
            array.push(model);
        });
        this.array = array;
        this.emitChange();
    }
    get() {
        return this.array;
    }
    find(index) {
        return this.array[index];
    }
    add(data = null) {
        const model = new BaseModel(this.dtoClass);
        if (data) {
            model.fill(data);
        }
        this.array.push(model);
        this.emitChange();
    }
    delete(index) {
        this.array = this.array.filter((item) => this.array.indexOf(item) !== index);
        this.emitChange();
    }
    count() {
        return this.array.length;
    }
    emitChange() {
        const currentValue = this.change.getValue();
        this.change.next(!currentValue);
    }
    getChange() {
        return this.change;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1tb2RlbC1hcnJheS5qcyIsInNvdXJjZVJvb3QiOiIvVm9sdW1lcy9EYXRvcyBNYXVyby9Eb2N1bWVudG9zL0Rlc2Fycm9sbG9zIFdlYi9Bbmd1bGFyIGxpYnMvYW5ndWxhci1icy1mb3JtLWNvbXBvbmVudHMvcHJvamVjdHMvbmctZm9ybXMvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9jbGFzc2VzL2Jhc2UtbW9kZWwtYXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDLE1BQU0sT0FBTyxjQUFjO0lBT3pCLFlBQVksUUFBYTtRQUxqQixVQUFLLEdBQXFCLEVBQUUsQ0FBQztRQUM3QixXQUFNLEdBQTZCLElBQUksZUFBZSxDQUM1RCxLQUFLLENBQ04sQ0FBQztRQUdBLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQWdCO1FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sR0FBRztRQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWE7UUFDdkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxHQUFHLENBQUMsT0FBWSxJQUFJO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLElBQUksRUFBRTtZQUNSLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQzVCLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQzdDLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFFTSxVQUFVO1FBQ2YsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQmFzZU1vZGVsIH0gZnJvbSAnLi9iYXNlLW1vZGVsJztcblxuZXhwb3J0IGNsYXNzIEJhc2VNb2RlbEFycmF5IHtcbiAgcHJpdmF0ZSBkdG9DbGFzczogYW55O1xuICBwcml2YXRlIGFycmF5OiBBcnJheTxCYXNlTW9kZWw+ID0gW107XG4gIHByaXZhdGUgY2hhbmdlOiBCZWhhdmlvclN1YmplY3Q8Qm9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEJvb2xlYW4+KFxuICAgIGZhbHNlLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKER0b0NsYXNzOiBhbnkpIHtcbiAgICB0aGlzLmR0b0NsYXNzID0gRHRvQ2xhc3M7XG4gICAgdGhpcy5hcnJheSA9IFtuZXcgQmFzZU1vZGVsKHRoaXMuZHRvQ2xhc3MpXTtcbiAgfVxuXG4gIHB1YmxpYyBmaWxsKGRhdGE6IEFycmF5PGFueT4pOiB2b2lkIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGRhdGEuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBjb25zdCBtb2RlbCA9IG5ldyBCYXNlTW9kZWwodGhpcy5kdG9DbGFzcyk7XG4gICAgICBtb2RlbC5maWxsKGl0ZW0pO1xuICAgICAgYXJyYXkucHVzaChtb2RlbCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgdGhpcy5lbWl0Q2hhbmdlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0KCk6IEFycmF5PEJhc2VNb2RlbD4ge1xuICAgIHJldHVybiB0aGlzLmFycmF5O1xuICB9XG5cbiAgcHVibGljIGZpbmQoaW5kZXg6IG51bWJlcik6IEJhc2VNb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlbaW5kZXhdO1xuICB9XG5cbiAgcHVibGljIGFkZChkYXRhOiBhbnkgPSBudWxsKTogdm9pZCB7XG4gICAgY29uc3QgbW9kZWwgPSBuZXcgQmFzZU1vZGVsKHRoaXMuZHRvQ2xhc3MpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBtb2RlbC5maWxsKGRhdGEpO1xuICAgIH1cbiAgICB0aGlzLmFycmF5LnB1c2gobW9kZWwpO1xuICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuZmlsdGVyKFxuICAgICAgKGl0ZW0pID0+IHRoaXMuYXJyYXkuaW5kZXhPZihpdGVtKSAhPT0gaW5kZXgsXG4gICAgKTtcbiAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBjb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0Q2hhbmdlKCk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuY2hhbmdlLmdldFZhbHVlKCk7XG4gICAgdGhpcy5jaGFuZ2UubmV4dCghY3VycmVudFZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDaGFuZ2UoKTogQmVoYXZpb3JTdWJqZWN0PEJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2U7XG4gIH1cbn1cbiJdfQ==