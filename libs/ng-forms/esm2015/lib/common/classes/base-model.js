import { validate } from '@webblocksapp/class-validator';
import { BehaviorSubject } from 'rxjs';
export class BaseModel {
    constructor(DtoClass) {
        this.errors = [];
        this.map = [];
        this.submitted = false;
        this.resetTimes = new BehaviorSubject(0);
        this.setDto(DtoClass);
    }
    setDto(DtoClass) {
        this.dtoObject = new DtoClass();
    }
    incrementResetTimes() {
        const currentValue = this.resetTimes.getValue();
        this.resetTimes.next(currentValue + 1);
    }
    resetDto() {
        const keys = Object.keys(this.dtoObject);
        keys.forEach((key) => {
            this.dtoObject[key] = null;
        });
    }
    getResetTimes() {
        return this.resetTimes;
    }
    getDto() {
        return this.dtoObject;
    }
    setValue(key, value) {
        this.dtoObject[key] = value || null;
    }
    getValue(key) {
        return this.dtoObject[key];
    }
    setSubmitted(flag) {
        this.submitted = flag;
    }
    getSubmitted() {
        return this.submitted;
    }
    setErrors(errors) {
        this.errors = Object.assign(this.errors, errors);
    }
    initMap() {
        const keys = Object.keys(this.dtoObject);
        keys.forEach((key) => {
            const filteredMap = this.map.filter((item) => item.property === key);
            if (filteredMap.length === 0) {
                this.map.push({ property: key, touched: false });
            }
        });
    }
    resetMap() {
        this.map = [];
        this.initMap();
    }
    setTouched(property = null, touched = true) {
        if (property) {
            this.map.map((item) => {
                if (item.property === property) {
                    item.touched = touched;
                }
            });
        }
        else {
            this.map.map((item) => {
                item.touched = touched;
            });
        }
    }
    cleanError(fieldName) {
        this.errors = this.errors.filter((error) => error.property !== fieldName);
    }
    cleanErrors() {
        this.errors = [];
    }
    getErrors() {
        return this.errors;
    }
    getMap() {
        return this.map;
    }
    getPropertyMap(property) {
        const filteredMap = this.map.filter((item) => item.property === property);
        if (filteredMap.length > 0) {
            return filteredMap[0];
        }
        return null;
    }
    fill(data) {
        const objectKeys = Object.keys(data);
        objectKeys.forEach((key) => {
            const value = data[key];
            this.setValue(key, value);
        });
    }
    validate(validatorOptions) {
        return new Promise((resolve) => {
            validatorOptions = Object.assign({
                propertyName: undefined,
                stopAtFirstError: true,
            }, validatorOptions);
            validate(this.dtoObject, validatorOptions).then((errors) => {
                if (errors.length === 0) {
                    this.cleanErrors();
                    resolve({
                        isValid: true,
                        validatedData: this.dtoObject,
                        errors: null,
                    });
                }
                if (errors.length > 0) {
                    this.setErrors(errors);
                    resolve({ isValid: false, validatedData: null, errors });
                }
                this.setTouched();
            });
        });
    }
    validateField(fieldName, validatorOptions) {
        return new Promise((resolve, reject) => {
            validatorOptions = Object.assign({
                propertyName: fieldName,
                stopAtFirstError: true,
            }, validatorOptions);
            validate(this.dtoObject, validatorOptions).then((errors) => {
                if (errors.length === 0) {
                    this.cleanError(fieldName);
                    resolve(this.dtoObject[fieldName]);
                }
                if (errors.length > 0) {
                    this.setErrors(errors);
                    reject(errors);
                }
                this.setTouched(fieldName);
            });
        });
    }
    reset() {
        this.cleanErrors();
        this.setSubmitted(false);
        this.resetDto();
        this.resetMap();
        this.incrementResetTimes();
    }
}
//# sourceMappingURL=data:application/json;base64,