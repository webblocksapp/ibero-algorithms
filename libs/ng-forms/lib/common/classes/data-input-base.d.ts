import { EventEmitter, OnInit, OnChanges, SimpleChanges, KeyValueDiffers, NgZone } from '@angular/core';
import { DataInputBaseInterface, FormEventsInterface, KeyboardEventsInterface, MouseEventsInterface } from '../interfaces';
import { BaseModel } from '../classes/base-model';
import { InputType, InputSize } from '../types';
export declare abstract class DataInputBase implements OnInit, OnChanges, DataInputBaseInterface, FormEventsInterface, KeyboardEventsInterface, MouseEventsInterface {
    private differs;
    ngZone: NgZone;
    id: string;
    label: string;
    name: string;
    type: InputType;
    size: InputSize;
    placeholder: string;
    disabled: boolean;
    readonly: boolean;
    help: string;
    startSlot: string;
    startSlotHtml: string;
    endSlot: string;
    endSlotHtml: string;
    autocomplete: boolean;
    focusEvent: EventEmitter<FocusEvent>;
    focusoutEvent: EventEmitter<FocusEvent>;
    blurEvent: EventEmitter<FocusEvent>;
    changeEvent: EventEmitter<Event>;
    inputEvent: EventEmitter<Event>;
    keydownEvent: EventEmitter<KeyboardEvent>;
    keypressEvent: EventEmitter<KeyboardEvent>;
    keyupEvent: EventEmitter<KeyboardEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dblclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mousemoveEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseupEvent: EventEmitter<MouseEvent>;
    mousewheelEvent: EventEmitter<MouseEvent>;
    wheelEvent: EventEmitter<MouseEvent>;
    inputSize: string;
    error: string;
    value: any;
    model: BaseModel;
    isReactiveForm: boolean;
    highlightOnValid: boolean;
    touched: boolean;
    private modelDiffer;
    constructor(differs: KeyValueDiffers, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    alwaysSetConfigsOnInit(): void;
    setConfigsOnInit(): void;
    alwaysDetectPropertiesChanges(propName: string): void;
    detectPropertiesChanges(propName: string): void;
    setComponentUniqueId(): void;
    getInputSize(): void;
    computeDisabledProperty(): void;
    computeReadonlyProperty(): void;
    focus(event: any): void;
    bindFocusEvents(event: any): any;
    focusout(event: any): void;
    bindFocusoutEvents(event: any): any;
    blur(event: any): void;
    bindBlurEvents(event: any): any;
    change(event: any): void;
    bindChangeEvents(event: any): any;
    input(event: any): void;
    bindInputEvents(event: any): any;
    keyup(event: any): void;
    bindKeyupEvents(event: any): any;
    keydown(event: any): void;
    bindKeydownEvents(event: any): any;
    keypress(event: any): void;
    bindKeypressEvents(event: any): any;
    click(event: any): void;
    bindClickEvents(event: any): any;
    dblclick(event: any): void;
    bindDblclickEvents(event: any): any;
    mousedown(event: any): void;
    bindMousedownEvents(event: any): any;
    mousemove(event: any): void;
    bindMousemoveEvents(event: any): any;
    mouseout(event: any): void;
    bindMouseoutEvents(event: any): any;
    mouseover(event: any): void;
    bindMouseoverEvents(event: any): any;
    mouseup(event: any): void;
    bindMouseupEvents(event: any): any;
    mousewheel(event: any): void;
    bindMousewheelEvents(event: any): any;
    wheel(event: any): void;
    bindWheelEvents(event: any): any;
    fillModel(value: any): void;
    validateField(): void;
    setTouched(): void;
    bindEventsAfterValidateField(): void;
    setError(error: any): void;
    refresh(): void;
    watchModel(): void;
    bindWatchModelEvents(): void;
}
